<!DOCTYPE html>
<html>
<head>
<title>Message Your Match!</title>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="/css/bootstrap.min.css" rel="stylesheet">
  <link href="/css/bootstrap-theme.min.css" rel="stylesheet">
  <link href="/css/home.css" rel="stylesheet">
  <link href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css" rel="stylesheet">
  <script src="https://code.jquery.com/jquery.js"></script>
  <script src="/js/bootstrap.min.js"></script>
  <script src="http://www.WebRTC-Experiment.com/RecordRTC.js"></script>
  <script src='/js/MediaStreamRecorder.js'></script>
  <script src='https://cdn.firebase.com/js/client/1.0.6/firebase.js'></script>
</head>
<body>
	


<script>
  var username;

function statusChangeCallback(response) {
    console.log('statusChangeCallback');
    console.log(response);
    // The response object is returned with a status field that lets the
    // app know the current login status of the person.
    // Full docs on the response object can be found in the documentation
    // for FB.getLoginStatus().
    if (response.status === 'connected') {
      // Logged into your app and Facebook.
      testAPI();
    } else if (response.status === 'not_authorized') {
      // The person is logged into Facebook, but not your app.
      document.getElementById('status').innerHTML = 'Please log ' +
        'into this app.';
    } else {
      // The person is not logged into Facebook, so we're not sure if
      // they are logged into this app or not.
      document.getElementById('status').innerHTML = 'Please log ' +
        'into Facebook.';
    }
  }

  // This function is called when someone finishes with the Login
  // Button.  See the onlogin handler attached to it in the sample
  // code below.
  function checkLoginState() {
    FB.getLoginStatus(function(response) {
      statusChangeCallback(response);
    });
  }
   window.fbAsyncInit = function() {
  FB.init({
    appId      : '284519508381624',
    cookie     : true,  // enable cookies to allow the server to access 
                        // the session
    xfbml      : true,  // parse social plugins on this page
    version    : 'v2.0' // use version 2.0
  });

  // Now that we've initialized the JavaScript SDK, we call 
  // FB.getLoginStatus().  This function gets the state of the
  // person visiting this page and can return one of three states to
  // the callback you provide.  They can be:
  //
  // 1. Logged into your app ('connected')
  // 2. Logged into Facebook, but not your app ('not_authorized')
  // 3. Not logged into Facebook and can't tell if they are logged into
  //    your app or not.
  //
  // These three cases are handled in the callback function.

  FB.getLoginStatus(function(response) {
    statusChangeCallback(response);
  });

  };
  (function(d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return;
    js = d.createElement(s); js.id = id;
    js.src = "//connect.facebook.net/en_US/sdk.js";
    fjs.parentNode.insertBefore(js, fjs);
  }(document, 'script', 'facebook-jssdk'));
  
  var pathname = window.location.pathname;
  var splits = pathname.split("&");
  var curr_user = splits[3]; // Because currently the texter is the person who hit like
  var my_match = '/' +splits[2] + '/';
  var matcher = '/' + splits[1] + '/';
  var my_match_name;

  function testAPI() {
    FB.api(my_match, function (response) {
      my_match_name = response.first_name;
  });
    FB.api('/me/', function (response) {
    	username = response.first_name;
	});
    FB.api(matcher, function (response) {
      setTimeout(function(){      
        var matcher_name = response.first_name + " " + response.last_name;
      $("#match span").html(matcher_name + " has matched you with " + my_match_name + "!");}, 300);
  });
}



function send() {
	var newtext = '\n'+ username + ": " + document.myform.addText.value;
	document.myform.conversation.value += newtext;
}

function goBack(){
	window.location.href = "/match/user=" + curr_user;
}


(function() {

  var cur_video_blob = null;
  var fb_instance;

  $(document).ready(function(){
    connect_to_chat_firebase();
    connect_webcam();
  });

  function connect_to_chat_firebase(){
    /* Include your Firebase link here!*/
    fb_instance = new Firebase("https://luminous-fire-7912.firebaseio.com");

    // generate new chatroom id or use existing id
    var url_segments = document.location.href.split("/#");
    if(url_segments[1]){
      fb_chat_room_id = url_segments[1];
    }else{
      fb_chat_room_id = Math.random().toString(36).substring(7);
    }
    display_msg({m:"Share this url with your friend to join this chat: "+ document.location.origin+"/#"+fb_chat_room_id,c:"red"})

    // set up variables to access firebase data structure
    var fb_new_chat_room = fb_instance.child('chatrooms').child(fb_chat_room_id);
    var fb_instance_users = fb_new_chat_room.child('users');
    var fb_instance_stream = fb_new_chat_room.child('stream');
    var my_color = "#"+((1<<23) + ((1<<23)*Math.random()|0)).toString(16);


    // listen to events
    fb_instance_users.on("child_added",function(snapshot){
      display_msg({m:snapshot.val().name+" joined the room",c: snapshot.val().c});
    });
    fb_instance_stream.on("child_added",function(snapshot){
      display_msg(snapshot.val());
    });


    var username = "steve";
    fb_instance_users.push({ name: username,c: my_color});
    $("#waiting").remove();

    // bind submission box
    $("#submission input").keydown(function( event ) {
      if (event.which == 13) {
        if(has_emotions($(this).val())){
          fb_instance_stream.push({m:username+": " +$(this).val(), v:cur_video_blob, c: my_color});
        }else{
          fb_instance_stream.push({m:username+": " +$(this).val(), c: my_color});
        }
        $(this).val("");
        scroll_to_bottom(0);
      }
    });

    // scroll to bottom in case there is already content
    scroll_to_bottom(1300);
  }

  // creates a message node and appends it to the conversation
  function display_msg(data){
  if (data.m) {
      $("#conversation").append("<div class='msg' style='color:"+data.c+"'>"+data.m+"</div>");
      var conversationEl = document.getElementById("conversation");
      conversationEl.scrollTop = conversationEl.scrollHeight;
    }
  if(data.v){
      var wrapper = document.createElement("div");

      wrapper.setAttribute("style", "display:inline; position:relative");


      // for video element
      var video = document.createElement("video");
      video.autoplay = true;
      video.controls = true; // optional
      video.loop = false;
      video.width = 200;

      // var audio = document.createElement("audio");
      // audio.autoplay = true;
      // audio.loop = false;

      var source = document.createElement("source");
      source.src =  URL.createObjectURL(base64_to_blob(data.v));
      source.type =  "video/webm";

      // var audSource = document.createElement("source");
      // audSource.src =  URL.createObjectURL(base64_to_blob(data.v));
      // audSource.type =  "audio/mpeg";

      video.appendChild(source);
      // audio.appendChild(audSource);
      wrapper.appendChild(video);
      // wrapper.appendChild(audio);


      var conversationEl = document.getElementById("conversation");
      conversationEl.scrollTop = conversationEl.scrollHeight;

    document.getElementById("conversation").appendChild(wrapper);
    } 
  }

  function scroll_to_bottom(wait_time){
    // scroll to bottom of div
    setTimeout(function(){
      $("html, body").animate({ scrollTop: $(document).height() }, 200);
    },wait_time);
  }

  function connect_webcam(){
    // we're only recording video, not audio
    var mediaConstraints = {
      video: true,
      audio: true
    };

    // callback for when we get video stream from user.
    var onMediaSuccess = function(stream) {
      // create video element, attach webcam stream to video element
      var video_width= 160;
      var video_height= 120;
      var webcam_stream = document.getElementById('webcam_stream');
      var video = document.createElement('video');
  

      webcam_stream.innerHTML = "";
      // adds these properties to the video
      video = mergeProps(video, {
          controls: true,
          width: video_width,
          height: video_height,
          src: URL.createObjectURL(stream),
          muted: true
      });

   
      video.play();
      webcam_stream.appendChild(video);


      // counter
      var time = 0;

      // now record stream in 5 seconds interval
      var video_container = document.getElementById('video_container');
      var mediaRecorder = new MediaStreamRecorder(stream);
      var index = 1;

      mediaRecorder.mimeType = 'video/webm';
      // mediaRecorder.mimeType = 'image/gif';
      // make recorded media smaller to save some traffic (80 * 60 pixels, 3*24 frames)
      mediaRecorder.video_width = video_width/2;
      mediaRecorder.video_height = video_height/2;

      mediaRecorder.ondataavailable = function (blob) {
          //console.log("new data available!");
          video_container.innerHTML = "";

          // convert data into base 64 blocks
          blob_to_base64(blob,function(b64_data){
            cur_video_blob = b64_data;
          });
      };
       mediaRecorder.start(3000);
      // setInterval( function() {
      //   mediaRecorder.stop();
      //   mediaRecorder.start(3000);
      // }, 3000 );
      console.log("connect to media stream!");
    }

    // callback if there is an error when we try and get the video stream
    var onMediaError = function(e) {
      console.error('media error', e);
    }

    // get video stream from user. see https://github.com/streamproc/MediaStreamRecorder
    navigator.getUserMedia(mediaConstraints, onMediaSuccess, onMediaError);
  }

  // check to see if a message qualifies to be replaced with video.
  var has_emotions = function(msg){
    return true;
  }




  // some handy methods for converting blob to base 64 and vice versa
  // for performance bench mark, please refer to http://jsperf.com/blob-base64-conversion/5
  // note useing String.fromCharCode.apply can cause callstack error
  var blob_to_base64 = function(blob, callback) {
    var reader = new FileReader();
    reader.onload = function() {
      var dataUrl = reader.result;
      var base64 = dataUrl.split(',')[1];
      callback(base64);
    };
    reader.readAsDataURL(blob);
  };

  var base64_to_blob = function(base64) {
    var binary = atob(base64);
    var len = binary.length;
    var buffer = new ArrayBuffer(len);
    var view = new Uint8Array(buffer);
    for (var i = 0; i < len; i++) {
      view[i] = binary.charCodeAt(i);
    }
    var blob = new Blob([view]);
    return blob;
  };

})();

</script>

<!-- <form name="myform"> -->
  <div>
    <h2 id="match">Congratulations <span></span></h2>
  </div>
<!-- 
	<div>
		<textarea name="conversation" rows="15" cols="50" readonly>Start messaging now!
		</textarea>
    <div>
		  <textarea name="addText" rows="2" cols="50"> </textarea>
    </div>
    <div>
      <button type="button" onclick="goBack();"> Back </button>
		  <input type="button" value="Send" onClick="send();">
    </div>
	</div>
</form> -->


  <div id="waiting">Connecting to chat server...</div>

  <div id="conversation"></div>
  <div id="submission">
    <input type="text" placeholder="say something..">
  </div>
  <div id="webcam_stream"></div>
  <div id="video_container"></div>



</body>
</html>